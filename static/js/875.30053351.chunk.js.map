{"version":3,"file":"static/js/875.30053351.chunk.js","mappings":"+OAEMA,EAAQC,EAAAA,GAAAA,IAAH,yEAMLC,EAAQD,EAAAA,GAAAA,MAAH,8hBA2BLE,EAAQF,EAAAA,GAAAA,MAAH,iY,SC9BJ,SAASG,IACd,IAAMC,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,IACrBC,GAAWC,EAAAA,EAAAA,MAOjB,OACE,UAACT,EAAD,YACE,SAACG,EAAD,CAAOO,KAAK,OAAOC,MAAON,EAAQO,SAPrB,SAAAC,GACf,IAAQF,EAAUE,EAAEC,cAAZH,MACRH,GAASO,EAAAA,EAAAA,GAAUJ,GACpB,EAIyDK,YAAY,OAClE,SAACd,EAAD,sCAGL,C,4CClBKe,EAAUhB,EAAAA,GAAAA,GAAH,sWAsBPiB,EAAiBjB,EAAAA,GAAAA,IAAH,8SAqBdkB,EAAgBlB,EAAAA,GAAAA,IAAH,+GAObmB,EAASnB,EAAAA,GAAAA,OAAH,0gCCrCL,SAASoB,EAAT,GAA6D,IAAD,IAAjCC,QAAWC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,OAC/CjB,GAAWC,EAAAA,EAAAA,MAEjB,OACE,+BACE,UAACQ,EAAD,YACE,UAACC,EAAD,YACE,0BACE,SAAC,MAAD,CAAqBQ,KAAM,MAC3B,0BAAOF,QAET,0BACE,SAAC,MAAD,CAAgBE,KAAM,MACtB,0BAAOD,WAGX,SAACN,EAAD,WACE,UAACC,EAAD,CAAQV,KAAK,SAASiB,QAAS,kBAAMnB,GAASoB,EAAAA,EAAAA,IAAcL,GAA7B,EAA/B,WACE,SAAC,MAAD,CAAiBG,KAAM,MACvB,8CAMX,CCtCD,I,MAAMG,EAAW5B,EAAAA,GAAAA,GAAH,mFCGP,SAAS6B,IACd,IAAMC,GAAWzB,EAAAA,EAAAA,IAAY0B,EAAAA,IAE7B,OACE,SAACH,EAAD,UACGE,EAASE,KAAI,SAAAX,GAAO,OACnB,SAACD,EAAD,CAAkCC,QAASA,GAArBA,EAAQC,GADX,KAK1B,CCbD,IAAMW,EAAkBjC,EAAAA,GAAAA,QAAH,4CAIfkC,EAAYlC,EAAAA,GAAAA,IAAH,kUAmBTiB,EAAiBjB,EAAAA,GAAAA,IAAH,uQ,UCvBb,SAASmC,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QAC7B,OAAO,uBAAIA,GACZ,CCOc,SAASR,IACtB,IAAME,GAAWzB,EAAAA,EAAAA,IAAY0B,EAAAA,IAEvBM,GAAYhC,EAAAA,EAAAA,IAAYiC,EAAAA,IAE9B,OACE,SAACL,EAAD,WACE,SAACC,EAAD,WACE,UAAC,EAAD,YACE,SAAC/B,EAAD,IACCkC,GACC,SAACE,EAAA,EAAD,IACET,EAASU,OAAS,GACpB,SAACX,EAAD,KAEA,SAACM,EAAD,CAAcC,QAAQ,gCAMjC,C,sKC9BKK,EAAiB,SAAAC,GAAK,OAAIA,EAAMZ,SAASa,KAAnB,EAEtBL,EAAkB,SAAAI,GAAK,OAAIA,EAAMZ,SAASO,SAAnB,EAEvBO,EAAc,SAAAF,GAAK,OAAIA,EAAMZ,SAASe,KAAnB,EAEnBvC,EAAe,SAAAoC,GAAK,OAAIA,EAAMtC,MAAV,EAIpB2B,GAAyBe,EAAAA,EAAAA,IAC7B,CAACL,EAAgBnC,IACjB,SAACwB,EAAU1B,GACT,OAAO0B,EAAS1B,QAAO,qBAAGmB,KACnBwB,cAAcC,SAAS5C,EAAO2C,cADd,GAGxB,G","sources":["components/Filter/Filter.styled.js","components/Filter/Filter.js","components/ContactListItem/ContactListItem.styled.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactsList.styled.js","components/ContactList/ContactsList.js","pages/Contacts/Contacts.styled.js","components/Notification/Notification.js","pages/Contacts/Contacts.js","redux/contacts/selectors.js"],"sourcesContent":["import styled from 'styled-components';\n\nconst Field = styled.div`\n  position: relative;\n\n  border-radius: 15px;\n`;\n\nconst Label = styled.label`\n  position: absolute;\n  top: 50%;\n  left: 16px;\n  transform: translateY(-50%);\n\n  padding: 2px;\n\n  font-size: 16px;\n\n  color: rgb(200, 200, 200);\n\n  pointer-events: none;\n\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  Input:focus ~ &,\n  Input:not(:placeholder-shown) ~ & {\n    transform: translateY(-35px) scale(0.8);\n\n    color: #010101;\n    background-color: #525b56;\n  }\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  height: 50px;\n  padding: 8px 16px;\n\n  font-size: 16px;\n\n  color: #010101;\n  background-color: transparent;\n\n  border: 1px solid rgb(200, 200, 200);\n  border-radius: 10px;\n  outline: none;\n\n  transition: border-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:focus,\n  &:not(:placeholder-shown) {\n    border-color: #010101;\n  }\n`;\n\nexport { Field, Label, Input };\n","import { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filter/slice';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { Field, Label, Input } from './Filter.styled';\n\nexport function Filter() {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const onChange = e => {\n    const { value } = e.currentTarget;\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <Field>\n      <Input type=\"text\" value={filter} onChange={onChange} placeholder=\" \" />\n      <Label>Find contacts by name</Label>\n    </Field>\n  );\n}\n","import styled from 'styled-components';\n\nconst Contact = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  padding: 20px;\n\n  font-size: 24px;\n\n  border: 1px solid rgb(200, 200, 200);\n  border-radius: 10px;\n\n  cursor: pointer;\n\n  transition: border-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    border-color: #010101;\n  }\n`;\n\nconst ContactWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 12px;\n\n  @media screen and (max-width: 479px) {\n    font-size: 16px;\n  }\n\n  p {\n    display: flex;\n    align-items: center;\n    gap: 12px;\n\n    svg {\n      stroke: #252f38;\n    }\n  }\n`;\n\nconst ButtonWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 12px;\n`;\n\nconst Button = styled.button`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 4px;\n\n  padding: 8px;\n\n  font-size: 16px;\n  letter-spacing: 1px;\n\n  color: #010101;\n  background-color: #ededed;\n\n  border: 1px solid rgb(200, 200, 200);\n  border-radius: 10px;\n\n  cursor: pointer;\n\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    background-color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    border-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    color: #fefefe;\n    background-color: #e1503d;\n    border-color: #e1503d;\n  }\n\n  :first-child {\n    &:hover,\n    &:focus {\n      color: #fefefe;\n      background-color: #2196f3;\n      border-color: #2196f3;\n    }\n  }\n\n  &:disabled {\n    background-color: #e2e2e2;\n    color: #636363;\n  }\n\n  @media screen and (min-width: 480px) {\n    min-width: 100px;\n    height: 40px;\n  }\n\n  span {\n    display: none;\n\n    @media screen and (min-width: 480px) {\n      display: inline-flex;\n    }\n  }\n`;\n\nexport { Contact, ContactWrapper, ButtonWrapper, Button };\n","import PropTypes from 'prop-types';\nimport { HiOutlinePhone, HiOutlineUserCircle } from 'react-icons/hi';\n// import { MdModeEdit, MdOutlineDelete } from 'react-icons/md';\nimport { MdOutlineDelete } from 'react-icons/md';\nimport { useDispatch } from 'react-redux';\n// import { setModal } from 'redux/modal/slice';\nimport { deleteContact } from 'redux/contacts/operations';\n// import { Modal } from 'components/Modal';\nimport {\n  Contact,\n  ContactWrapper,\n  ButtonWrapper,\n  Button,\n} from './ContactListItem.styled';\n\nexport function ContactListItem({ contact: { id, name, number } }) {\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <Contact>\n        <ContactWrapper>\n          <p>\n            <HiOutlineUserCircle size={24} />\n            <span>{name}</span>\n          </p>\n          <p>\n            <HiOutlinePhone size={24} />\n            <span>{number}</span>\n          </p>\n        </ContactWrapper>\n        <ButtonWrapper>\n          <Button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n            <MdOutlineDelete size={24} />\n            <span>Delete</span>\n          </Button>\n        </ButtonWrapper>\n      </Contact>\n    </>\n  );\n}\n\nContactListItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import styled from 'styled-components';\n\nconst Contacts = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`;\n\nexport { Contacts };\n","import { useSelector } from 'react-redux';\nimport { selectFilteredContacts } from 'redux/contacts/selectors';\nimport { ContactListItem } from 'components/ContactListItem';\nimport { Contacts } from './ContactsList.styled';\n\nexport function ContactList() {\n  const contacts = useSelector(selectFilteredContacts);\n\n  return (\n    <Contacts>\n      {contacts.map(contact => (\n        <ContactListItem key={contact.id} contact={contact} />\n      ))}\n    </Contacts>\n  );\n}\n","import styled from 'styled-components';\n\nconst ContactsSection = styled.section`\n  padding: 36px 0;\n`;\n\nconst Container = styled.div`\n  padding-left: 20px;\n  padding-right: 20px;\n  margin-left: auto;\n  margin-right: auto;\n\n  @media screen and (min-width: 480px) {\n    width: 480px;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 768px;\n  }\n\n  @media screen and (min-width: 1200px) {\n    width: 1200px;\n  }\n`;\n\nconst ContactWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n\n  padding: 20px;\n  margin: 0 auto;\n  width: 99%;\n\n  background-color: #525b56;\n\n  border-radius: 15px;\n\n  @media screen and (min-width: 768px) {\n    width: 510px;\n  }\n`;\n\nexport { ContactsSection, Container, ContactWrapper };\n","import PropTypes from 'prop-types';\n\nexport function Notification({ message }) {\n  return <p>{message}</p>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import { useSelector} from 'react-redux';\nimport {\n  selectFilteredContacts,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\nimport { Filter } from 'components/Filter';\nimport { ContactList } from 'components/ContactList';\nimport { ContactsSection, Container, ContactWrapper } from './Contacts.styled';\nimport { Loader } from 'components/Loader';\nimport { Notification } from 'components/Notification';\n\nexport default function Contacts() {\n  const contacts = useSelector(selectFilteredContacts);\n\n  const isLoading = useSelector(selectIsLoading);\n\n  return (\n    <ContactsSection>\n      <Container>\n        <ContactWrapper>\n          <Filter />\n          {isLoading ? (\n            <Loader />\n          ) : contacts.length > 0 ? (\n            <ContactList />\n          ) : (\n            <Notification message=\"There is no contacts.\" />\n          )}\n        </ContactWrapper>\n      </Container>\n    </ContactsSection>\n  );\n}\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst selectContacts = state => state.contacts.items;\n\nconst selectIsLoading = state => state.contacts.isLoading;\n\nconst selectError = state => state.contacts.error;\n\nconst selectFilter = state => state.filter;\n\nconst selectId = state => state.modal.id;\n\nconst selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n\nexport {\n  selectContacts,\n  selectIsLoading,\n  selectError,\n  selectFilter,\n  selectId,\n  selectFilteredContacts,\n};\n"],"names":["Field","styled","Label","Input","Filter","filter","useSelector","selectFilter","dispatch","useDispatch","type","value","onChange","e","currentTarget","setFilter","placeholder","Contact","ContactWrapper","ButtonWrapper","Button","ContactListItem","contact","id","name","number","size","onClick","deleteContact","Contacts","ContactList","contacts","selectFilteredContacts","map","ContactsSection","Container","Notification","message","isLoading","selectIsLoading","Loader","length","selectContacts","state","items","selectError","error","createSelector","toLowerCase","includes"],"sourceRoot":""}